In Open Source projects, you can receive improvement suggestions from other developers. You can receive this and other types of feedbacks through the Issues tab on GitHub.
One way to solve problems from other projects is to fork the project to yourself, and make the changes there.
If you're trying to use 2 or more different Git users on the same OS on Windows, you might have to delete the previous credentials so the GitHUb window can appear again to type your email and password.
You don't need Issues to create a Pull Requests, but you can use it to solve the Issues in your project.
For each new branch, you can create a Pull Request to Merge this branch with the Master. You can even do self assignments with it.

//Advanced Control
You can use 'git cherry-pick <commit_harsh>' to merge an especific commit into your current branch.
The command 'git bisect' can be used to navigate through previous commits to find a bug. This can be a lot of manual work though, usually it's better to just use an tool or extension like GitLens.
You can use 'git blame <file_name>' to see who was the last person that modified the lines of the file. Once again, GitLens can do this automatically.

//Strategies and Tools
Once the Master branch is stable, is a common convention to move the project to the Staging Branch for QA tests, and then to Production branch to deploy it.
Other tools showcased by the course were 'Git Cola', 'GitHub Desktop', and 'GitKraken'.
For me personally, the VSCode Source Control together with GitLens Extension works just fine.

//Events
Inside '.git/hooks' there are files with the '.sample' extensions. The 'pre-commit.sample' file can be used to automatically run a shell script before every commit.
This can be used to run test scprits to check if the code follows basic standards before submitting the changes.
An good example of this is mova-script from work
You might need to run 'chmod u+x pre-commit' in Linux OS to be able to run the files.
In class, the instructor created a file 'post-receive' to run as a hook right after the developer push his changes. However, this was done inside the hooks of the local BARE server, not on GitHub or GitLab server.
It didn't go too deep on it, but maybe, this automatic deploy can be used to run unit tests after pushing the changes.

Another website to learn and train Git Branching: https://learngitbranching.js.org/

Command List:
- git cherry-pick <commit_harsh>

- git bisect
- git blame <file_name>
- chmod u+x pre-commit